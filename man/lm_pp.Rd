% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lm_pp.R
\name{lm_pp}
\alias{lm_pp}
\title{Posterior inference using a power prior with fixed a0
for the normal linear model}
\usage{
lm_pp(
  formula,
  data,
  histdata,
  a0 = 0.5,
  beta0 = NULL,
  Sigma0 = NULL,
  offset = NULL,
  offset0 = NULL,
  sigmasq.shape = NULL,
  sigmasq.scale = NULL,
  prec.shape = NULL,
  prec.rate = NULL,
  ...
)
}
\arguments{
\item{formula}{an object of class \code{\link[stats]{formula}}.}

\item{data}{a \code{\link[base]{data.frame}} of current data giving all variables in \code{formula}}

\item{histdata}{a \code{\link[base]{data.frame}} of historical data giving all variables in \code{formula}}

\item{a0}{power prior parameter (between 0 and 1)}

\item{beta0}{mean for initial prior on regression coefficients. Defaults to vector of 0s}

\item{Sigma0}{covariance matrix for initial prior on regression coefficients. Defaults to \code{diag(100, ncol(X))}}

\item{offset}{offset for current data. If \code{NULL}, no offset is utilized}

\item{offset0}{offset for historical data. If \code{NULL}, no offset is utilized}

\item{sigmasq.shape}{shape parameter for inverse-gamma prior on variance parameter. Defaults to \code{2.1}}

\item{sigmasq.scale}{scale parameter for inverse-gamma prior on variance parameter. Defaults to \code{1.1}}

\item{prec.shape}{shape parameter for gamma prior on precision parameter (inverse of \code{sigmasq}). Ignored if sigmasq.shape is specified}

\item{prec.rate}{rate parameter for gamma prior on precision parameter (inverse of \code{sigmasq}). Ignored if sigmasq.scale is specified}

\item{...}{optional parameters to pass onto \code{rstan::sampling}}
}
\value{
an object of class \link[rstan:stanfit-class]{rstan::stanfit} returned by \code{rstan::sampling}
}
\description{
Sample from the posterior of a power prior (PP) of a linear model (LM).
This is a wrapper for the function \code{glm_pp} with
\code{family == gaussian('identity')}.
}
\examples{
## Generate current and historical data
set.seed(123)
N = 100
N0 = 50
x = rnorm(N)
y = 1 + 0.5 * x + rnorm(N)
x0 = rnorm(N0)
y0 = 1 + 0.5 * x0 + rnorm(N0)
data = data.frame('y' = y, 'x' = x)
histdata = data.frame('y' = y0, 'x' = x0)

## Perform MCMC of non-normalized power prior for normal linear model
fit = lm_pp(y ~ x, data, histdata, a0 = 0.5)

}
